datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Post Post[]

  Project Project[]
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}


// Custom Models
model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String
  message   String
  status    String  @default("pending") // pending, answered, closed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SMS {
  id        String   @id @default(cuid())
  to        String
  from      String
  message   String
  status    String  @default("pending") // pending, sent, failed
  createdAt DateTime @default(now())
}

model Log {
  id        String   @id @default(cuid())
  type      String
  message   String
  createdAt DateTime @default(now())
}

//Post
model Category {
  id        String   @id @default(cuid())
  title      String
  description String
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts     Post[]
}

model Post {
  id          String   @id @default(cuid())
  title       String
  slug        String
  content     String
  status      String  @default("draft") // draft, published, archived
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author      User     @relation(fields: [authorId], references: [id])
  authorId    String   @map("author_id")

  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String   @map("category_id")

  comments    Comment[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  email     String
  content   String
  status    String  @default("pending") // pending, approved, rejected
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @map("post_id")
}

//Project
model Project {
  id          String   @id @default(cuid())
  title       String
  slug        String
  content     String
  status      String  @default("draft") // draft, published, archived
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author      User     @relation(fields: [authorId], references: [id])
  authorId    String   @map("author_id")

  scope      Scope   @relation(fields: [scopeId], references: [id])
  scopeId    String  @map("scope_id")

  tags      Tag[]

  @@map("projects")
}

model Scope {
  id        String   @id @default(cuid())
  title      String
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects  Project[]
}

model Tag {
  id        String   @id @default(cuid())
  title      String
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects  Project[]
}