// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// CMS Models
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role         String    @default("user") // admin, editor, user

  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  projects      Project[]

  createdAt     DateTime  @default(now())

 
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Custom Models
model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String
  message   String
  status    String  @default("pending") // pending, answered, closed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SMS {
  id        String   @id @default(cuid())
  to        String
  from      String
  message   String
  status    String  @default("pending") // pending, sent, failed
  createdAt DateTime @default(now())
}

model Log {
  id        String   @id @default(cuid())
  type      String
  message   String
  createdAt DateTime @default(now())
}

//Post
model Category {
  id        String   @id @default(cuid())
  title      String
  description String
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts     Post[]
}

model Post {
  id          String   @id @default(cuid())
  title       String
  slug        String
  content     String
  status      String  @default("draft") // draft, published, archived
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author      User     @relation(fields: [authorId], references: [id])
  authorId    String   @map("author_id")

  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String   @map("category_id")

  comments    Comment[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  email     String
  content   String
  status    String  @default("pending") // pending, approved, rejected
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @map("post_id")
}

//Project
model Project {
  id          String   @id @default(cuid())
  title       String
  slug        String
  content     String
  status      String  @default("draft") // draft, published, archived
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author      User     @relation(fields: [authorId], references: [id])
  authorId    String   @map("author_id")

  scope      Scope   @relation(fields: [scopeId], references: [id])
  scopeId    String  @map("scope_id")

  tags      Tag[]

  @@map("projects")
}

model Scope {
  id        String   @id @default(cuid())
  title      String
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects  Project[]
}

model Tag {
  id        String   @id @default(cuid())
  title      String
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects  Project[]
}